name: OMS-D Regression

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branch name
        default: main

jobs:
  build:
    name: OMS Automation
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Find pom.xml Path
        id: find-pom
        run: |
          $pomPath = Get-ChildItem -Path . -Recurse -Filter pom.xml | Select-Object -First 1 -ExpandProperty FullName
          if (-not $pomPath) { throw "pom.xml not found in the repository" }
          Write-Output "Found pom.xml at: $pomPath"
          echo "::set-output name=pom_path::$pomPath"
        shell: pwsh

      - name: Show pom.xml Path
        run: |
          echo "pom.xml path: ${{ steps.find-pom.outputs.pom_path }}"

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '16'
          cache: maven
        env:
          _JAVA_OPTIONS: "-Xmx4g -Xms512m"

      - name: Install Chocolatey if Missing
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) 
          {
              Write-Output "Installing Chocolatey..."
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
              $env:PATH += ";C:\ProgramData\chocolatey\bin"
          } 
          else 
          {
              Write-Output "Chocolatey already installed."
          }

      - name: Add Chocolatey to PATH
        run: |
          $env:PATH += ";C:\ProgramData\chocolatey\bin"
          Write-Output "PATH: $env:PATH"

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: List Files in Current Directory
        run: dir

      - name: Create Cucumber Reports Directory
        run: mkdir AFS_Automation/OMS_Automation/target/cucumber-reports

      - name: Run OMS Automation Module
        run: >
          mvn clean install test -DsuiteXmlFile='TestNG_Admin_Grid.xml'
          -Dheadless=true
          -DargLine="-Xmx512m -Xms256m"
          --file "${{ steps.find-pom.outputs.pom_path }}"
        working-directory: AFS_Automation/OMS_Automation

      - name: Upload Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: AFS_Automation/OMS_Automation/target/cucumber-reports

  clean-up:
    runs-on: windows-latest
    steps:
      - name: Clean Up Temporary Files
        shell: pwsh
        run: |
          if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            Write-Error "Administrator privileges are required for cleanup."
            exit 1
          }
          Write-Host "Deleting all files in $env:TEMP"
          Get-ChildItem -Path "$env:TEMP" -Recurse -Force -File | Remove-Item -Force
          Write-Host "Removing all empty folders in $env:TEMP"
          Get-ChildItem -Path "$env:TEMP" -Recurse -Force -Directory |
          Where-Object { $_.GetFiles().Count -eq 0 -and $_.GetDirectories().Count -eq 0 } |
          Remove-Item -Force -Recurse
          
          $targetPath = "C:\Windows\SystemTemp"
          if (Test-Path $targetPath) {
          Write-Host "Deleting all files in $targetPath"
          Get-ChildItem -Path $targetPath -Recurse -Force -File | Remove-Item -Force -ErrorAction SilentlyContinue
          
          Write-Host "Removing all empty folders in $targetPath"
          Get-ChildItem -Path $targetPath -Recurse -Force -Directory |
          Where-Object { $_.GetFiles().Count -eq 0 -and $_.GetDirectories().Count -eq 0 } |
          Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

          Write-Host "Cleanup completed successfully."
          } else {
          Write-Host "Target path does not exist. Skipping cleanup."
          }
